//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().roles?[name == 'admin'])
/// @@allow('create', true)
/// @@allow('read', true)
model User {
  id              String         @id() @default(uuid())
  name            String?
  email           String?        @unique()
  pictureUrl      String?        @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation String?
  status          UserStatus     @default(VERIFIED)
  /// @password
  /// @omit
  password        String?
  dateCreated     DateTime       @default(now())
  dateUpdated     DateTime       @default(now()) @updatedAt()
  accounts        Account[]
  sessions        Session[]
  roles           Role[]
  videos          Video[]        @relation("user")
  videoComments   VideoComment[] @relation("user")
  subscriptions   Subscription[] @relation("user")
  payments        Payment[]      @relation("user")
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('read', auth().id == this.userId)
/// @@allow('delete', auth().id == this.userId)
/// @@allow('create', name != 'admin')
/// @@allow('update', future().name != 'admin')
model Role {
  id     String @id() @default(uuid())
  name   String
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

/// @@allow('all', true)
model Video {
  id            String         @id() @default(uuid())
  title         String?
  description   String?
  url           String?
  status        String?
  userId        String?
  user          User?          @relation(fields: [userId], references: [id], name: "user")
  videoTags     VideoTag[]     @relation("video")
  videoComments VideoComment[] @relation("video")
  dateCreated   DateTime       @default(now())
  dateUpdated   DateTime       @default(now()) @updatedAt()
}

/// @@allow('all', true)
model VideoTag {
  id          String   @id() @default(uuid())
  tag         String?
  videoId     String?
  video       Video?   @relation(fields: [videoId], references: [id], name: "video")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model VideoComment {
  id          String   @id() @default(uuid())
  comment     String?
  videoId     String?
  video       Video?   @relation(fields: [videoId], references: [id], name: "video")
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Subscription {
  id          String   @id() @default(uuid())
  plan        String?
  startDate   String?
  endDate     String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Payment {
  id          String   @id() @default(uuid())
  amount      Float?
  date        String?
  status      String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}
